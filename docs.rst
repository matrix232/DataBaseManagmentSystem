Программный интрефейс
=====================

Глобальные обьекты
------------------

* Структура table - обьект представляющий основной вид таблицы, имеет такие поля:
    * **name** - имя таблицы.
    * **rows** - список строк таблицы, хранит списки данных.
    * **columns** - список колонок таблицы, хранит в точечные пары **(column-name . column-type)**

* ``*database*`` - хэш-таблица, отвечающая за хранение созданных *table*. Хранит таблицы по ключ-значение **(table-name : table)**

Функции пользователя СУБД
-------------------------

*create-table* - функция, которая создает таблицу. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Параметры:
    * **name** - имя таблицы.
    * **columns** - список пар названия колонки и типа колонки.

    Возвращает 1 в качестве успешного создания таблицы, nil - если таблицы не была создана.

    Пример создания таблицы:

:: 
    
(create-table 'users '((id integer primary key) (username string) (password string) (email string))))


*insert-into* - функция, для вставки данных в таблицу.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Параметры:
    * **table-name** - имя таблицы.
    * **row-data** - список точечных пар, которая хранит в себе имя колонки для вставки и данные. 

::

(insert-into 'users '((id . 1) (username . "admin") (password . "passADM") (email . "adm@mail.ru")))

*select-from* - функция для чтения данных из таблицы. Возвращает список точечных пар (колонка . данные).
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Параметры:
    * **table-name** - имя таблицы.
    * **columns** - колонки для чтения из таблицы.
    * **condition** - опциональный параметр, передает условия для получения выборки данных.

::

(select-from users 'username '(age . 24)))

*delete-from* - функция для удаления данных из таблицы.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Параметры:
    * **table-name** - имя таблицы.
    * **cond-pair** - список ассоциативных списков вида (column-name . value).

::

(delete-from 'users '((id . 1)))

*drop-table* - функция для удаления таблицы.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Параметры:
    * **table-name** - имя таблицы.

::

(drop-table 'users)

*make-select-from* - макрос для выборки данных по критериям.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Параметры:
    * **table-name** - имя таблицы.
    * **columns** - список колонок для выборки.
    * **body** - дополнительный параметр для передачи критериев выборки в виде кода.

::

    (make-select-from (table-name columns &body body))

**Варианты выборки данных по разным критериям:**
Фильтрация строк, где возраст больше 20. row - передается для работы внутри макроса.

::

    (make-select-from 'tab1 '(name age) (> (cdr (assoc 'age row)) 20))

Фильтрация строк, где имя — "alex" и возраст больше 20.

::

    (make-select-from 'tab1 '(name age)
        (and (string= (cdr (assoc 'name row)) "alex")
            (> (cdr (assoc 'age row)) 20)))

Фильтрация строк, где возраст больше 20 и имя состоит из 4 символов.

::

    (make-select-from 'tab1 '(name age)
        (and (> (cdr (assoc 'age row)) 20)
            (= (length (cdr (assoc 'name row))) 4)))


Внутренее устройство модуля
---------------------------

*table-exist* - функция, которая проверяет создалась ли таблица.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Параметры:
    * **name** - имя таблицы.

*get-columns-name* - функция, для получения всех строк таблицы.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Параметры:
    * **columns** - обьект колонок для разбиения.

*create-condition* - макрос для обработки условий выборки.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Параметры:
    * **conditions** - список условий.
